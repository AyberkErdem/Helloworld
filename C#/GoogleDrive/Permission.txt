   static string[] DriveScopes =
          { DriveService.Scope.Drive};

  public UserCredential GetUserCredential()
        {

            using (var stream = new FileStream("client_secret.json",
              FileMode.Open, FileAccess.Read))
            {
                string credPath = "token.json";
                return GoogleWebAuthorizationBroker
                       .AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    DriveScopes, "user", CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;

            }
        }

  public string drive()
        {
            try
            {
                string[] Scopes = { DriveService.Scope.Drive };
                string ApplicationName = "Drive API .NET Quickstart";
                UserCredential credential;

                using (var stream =
                    new FileStream("client_secret.json", FileMode.Open, FileAccess.Read))
                {
                    // The file token.json stores the user's access and refresh tokens, and is created
                    // automatically when the authorization flow completes for the first time.
                    string credPath = "token.json";
                    credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                        GoogleClientSecrets.Load(stream).Secrets,
                        Scopes,
                        "user",
                        CancellationToken.None,
                        new FileDataStore(credPath, true)).Result;
                    MessageBox.Show("Credential file saved to: " + credPath, "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                // Create Drive API service.
                var service = new DriveService(new BaseClientService.Initializer()
                {
                    HttpClientInitializer = credential,
                    ApplicationName = ApplicationName,
                });

                // Define parameters of request.
                FilesResource.ListRequest listRequest = service.Files.List();
                listRequest.PageSize = 10;
                listRequest.Fields = "nextPageToken, files(id, name)";
                return "Success";
            }
            catch (Exception ex)
            {
                return ex.ToString();
            }


        }