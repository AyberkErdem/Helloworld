import xlrd
from plxscripting.easy import *
# Give the location of the file
loc = ("C:\\Users\\tospaga\\Desktop\\calisma2.xlsx")
# To open Workbook
wb = xlrd.open_workbook(loc)
sheet = wb.sheet_by_index(0)
s_i, g_i = new_server('localhost', 10000, password='123456789')
s_o, g_o = new_server('localhost', 10001, password='123456789')
index=0
x=[]
y=[]
z=[]
h=[]
a=[]
x1=[]
z1=[]
pre1=0
pre2=0
pre3=0
pre4=0
i=1
while i<(sheet.nrows-1):
    k=int(sheet.cell_value(i,13)*100)
    if k>=68:
        x.append(sheet.cell_value(i,0))
        y.append(sheet.cell_value(i,1))
        z.append(sheet.cell_value(i,2))
        a.append(sheet.cell_value(i,13))
        h.append(k)
    #    print(sheet.cell_value(i, 13))
    i += 1
#print("------", "[i]","-------------","[x]","--------------","[y]","--------------","[z]")
i=0
j=0
g=0
g1=[]
max=0
while j<2:
    while i<len(h):
        if float(h[i])>=m and h[i]!=g:
            exists = h[i] in g1
            if exists==False:
                m=float(Hgt[i])
                index=i
        i+=1
    if j==1 and (x1[0]!=x[index] and z1[0]!=z[index]):
        x1.append(x[index])#2,3
        z1.append(z[index])#2,3
    if j==0:
        x1.append(x[index])#2,3
        z1.append(z[index])#2,3
        g=Hgt[index]
    if j==1 and (x1[0]==x[index] and z1[0]==z[index]):
        g1.append(h[index])
        j-=1
    i=0
    m=0
    j+=1
a=1
flag=0
while 1==1:
    try:
        if flag==0:#initiliazing data
            s_i, g_i = new_server('localhost', 10000, password='123456789')
            s_o, g_o = new_server('localhost', 10001, password='123456789')
            j=0
            k=float(6.15)
            m=float(0.0)
            k1=float(6.15)
            m1=float(0.10)
            k2=float(x1[j])
            m2=float(z1[j])
            k3=float(x1[j+1])
            m3=float(z1[j+1])
            point1=g_i.point(k,0,m)
            point2=g_i.point(k1,0,m1)
            point3=g_i.point(k2,0,m2)
            point4=g_i.point(k3,0,m3)
            surface_g = g_i.surface(point1,point2,point3,point4)
            line_g=g_i.line((0,0,0),(0,1,0))[-1]
            volume_g=g_i.extrude(surface_g,line_g)
            g_i.delete(line_g)
            g_i.delete(g_i.Point_1)
            g_i.delete(g_i.Point_2)
            g_i.delete(g_i.Point_3)
            g_i.delete(g_i.Point_4)
            g_i.delete(g_i.Point_5)
            g_i.delete(g_i.Point_6)
            g_i.delete(g_i.Polygon_1)
            g_i.Volume_3.Soil.setmaterial(g_i.LooseSoil)
            g_i.combine(g_i.Volume_2,g_i.Volume_3)
            g_i.Volume_4.Soil.setmaterial(g_i.LooseSoil)
            g_i.gotostructures()
            flag=1
            g_i.gotomesh()#mesh
            g_i.mesh(0.01,4)
            g_i.gotostructures()
            g_i.gotostages()
            g_i.calculate()
            g_i.gotostructures()
            pre1=float(k2)
            pre2=float(m2)
            pre3=float(k3)
            pre4=float(m3)
        else:#continious data
            s_o, g_o = new_server('localhost', 10001, password='123456789')
            x1=[]
            z1=[]
            x1.append(pre1)#0
            x1.append(pre3)#1
            z1.append(pre2)#0
            z1.append(pre4)#1
            Hgt = g_o.getresults(g_o.Phases[-1], g_o.ResultTypes.Soil.HydraulicGradientTot, 'node')
            x = g_o.getresults(g_o.Phases[-1], g_o.ResultTypes.Soil.X, 'node')
            z=g_o.getresults(g_o.Phases[-1], g_o.ResultTypes.Soil.Z, 'node')
            g=0
            g1=[]
            j=0
            i=0
            m=0
            k=0
            while j<2:
                while i<len(Hgt):
                    if float(Hgt[i])>=m and Hgt[i]!=g:
                        exists = Hgt[i] in g1
                        if exists==False:
                            m=float(Hgt[i])
                            index=i
                    i+=1
                if j==1 and (x1[0]!=x[index] and z1[0]!=z[index]):
                    x1.append(x[index])#2,3
                    z1.append(z[index])#2,3
                if j==0:
                    x1.append(x[index])#2,3
                    z1.append(z[index])#2,3
                    g=Hgt[index]
                if j==1 and (x1[0]==x[index] and z1[0]==z[index]):
                    g1.append(Hgt[index])
                    j-=1
                i=0
                m=0
                j+=1
            j=0
            s_i, g_i = new_server('localhost', 10000, password='123456789')
            k=float(x1[j])
            m=float(z1[j])
            k1=float(x1[j+1])
            m1=float(z1[j+1])
            k2=float(x1[j+2])
            m2=float(z1[j+2])
            k3=float(x1[j+3])
            m3=float(z1[j+3])
            print("|",k,"|",m)
            print("|",k1,"|",m1)
            print("|",k2,"|",m2)
            print("|",k3,"|",m3)
            point1=g_i.point(k,0,m)
            point2=g_i.point(k1,0,m1)
            point3=g_i.point(k2,0,m2)
            point4=g_i.point(k3,0,m3)
            surface_g = g_i.surface(point1,point2,point3,point4)
            line_g=g_i.line((0,0,0),(0,1,0))[-1]
            volume_g=g_i.extrude(surface_g,line_g)
            g_i.Volume_2.Soil.setmaterial(g_i.LooseSoil)
            g_i.delete(line_g)
            g_i.delete(g_i.Point_1)
            g_i.delete(g_i.Point_2)
            g_i.delete(g_i.Point_3)
            g_i.delete(g_i.Point_4)
            g_i.delete(g_i.Point_5)
            g_i.delete(g_i.Point_6)
            g_i.delete(g_i.Polygon_1)
            if a==1:
                g_i.combine(g_i.Volume_2,g_i.Volume_4)
                g_i.Volume_3.Soil.setmaterial(g_i.LooseSoil)
                a=2
            else:
                g_i.combine(g_i.Volume_2,g_i.Volume_3)
                g_i.Volume_4.Soil.setmaterial(g_i.LooseSoil)
                a=1
            g_i.gotomesh()#mesh
            g_i.mesh(0.5,4)
            g_i.gotostages()
            g_i.calculate()
            g_i.gotostructures()
            pre1=float(k2)
            pre2=float(m2)
            pre3=float(k3)
            pre4=float(m3)
    except Exception as e:
        print(e)
        sys.exit()

        #analiz
#int("STR"
